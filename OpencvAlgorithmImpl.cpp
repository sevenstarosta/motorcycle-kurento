/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include <OpencvAlgorithmImplFactory.hpp>
#include "OpencvAlgorithmImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>
#include "MediaPipelineImpl.hpp"

#define GST_CAT_DEFAULT kurento_opencv_algorithm_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "OpencvAlgorithmAlgorithmImpl"

namespace kurento
{
namespace module
{
namespace opencvalgorithm
{

OpencvAlgorithmImpl::OpencvAlgorithmImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) : OpenCVFilterImpl (config, std::dynamic_pointer_cast<MediaPipelineImpl> (mediaPipeline) )

{
    std::ofstream file;
    file.open("/tmp/kurento.log", std::ofstream::app);
    file << "CONSTRUCTOR KURENTO OPENCV IMPL CALLED" << std::endl;
    file.close();  
}
OpencvAlgorithmImpl::~OpencvAlgorithmImpl()
{
    std::ofstream file;
    file.open("/tmp/kurento.log", std::ofstream::app);
    file << "DESTRUCTOR KURENTO OPENCV IMPL CALLED" << std::endl;
    file.close();
}

//-------------------------------JAVA CONFIGURATION INTERFACE METHODS-----------------------------



MediaObjectImpl *
OpencvAlgorithmImplFactory::createObject (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) const
{
  return new OpencvAlgorithmImpl (config, mediaPipeline);
}

OpencvAlgorithmImpl::StaticConstructor OpencvAlgorithmImpl::staticConstructor;

OpencvAlgorithmImpl::StaticConstructor::StaticConstructor()
{
  GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
                           GST_DEFAULT_NAME);
}

void OpencvAlgorithmImpl::setMaxBufferSize (int size)
{
  //Set the buffer image size. This parameter will influence directly on the delay stream delay for recorderd media 
  OpencvAlgorithmOpenCVImpl::setMaxBufferSize (size);
}


void OpencvAlgorithmImpl::setPoints(int x0, int x1,int x2,int x3,int y0,int y1,int y2,int y3,int start){
    //Set the OpenCV rect points to detect motorcycles
    OpencvAlgorithmOpenCVImpl::setPoints(x0,x1,x2,x3,y0,y1,y2,y3,start);
}


void OpencvAlgorithmImpl::dealoc(){
    /*Release the reference created between ImplFactory and OpenCVImplFactory
      That is necessary to free the connection between those objects and make possible
      to call the destructors
    */
    delete this->event;
    this->eventEnable = false;
}

void OpencvAlgorithmImpl::setMaxTimeToRec(int time){
    //Just set the maximum time to rec the media stream. That time is based on the
    //realtime framerate, so the value set is just a parameter make a reference
    //for the time recorded. The real max time deppends on the current framerate, so 
    //it can be a little bir higher or lower to the set value
    OpencvAlgorithmOpenCVImpl::setMaxTimeToRec(time);
}


void OpencvAlgorithmImpl::setEventHandler(){
    //This method initialize the CodeFound object reference to the OpenCV class
    //This allow to call Events in the OpenCV class

    const std::string codeType = "CodeFound";
    const std::string value = "init";
    
    CodeFound *event = new CodeFound(shared_from_this(), CodeFound::getName(),codeType,value);
    this->event = event;    
    this->eventEnable = true;
}



void OpencvAlgorithmImpl::setOpencvAlgorithmType(int type){
    OpencvAlgorithmOpenCVImpl::setOpencvAlgorithmType(type);
}

} /* opencvalgorithm */
} /* module */
} /* kurento */
