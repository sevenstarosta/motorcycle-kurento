/* Autogenerated with kurento-module-creator */

#ifndef __OPENCV_ALGORITHM_IMPL_HPP__
#define __OPENCV_ALGORITHM_IMPL_HPP__

#include "OpenCVFilterImpl.hpp"
#include "OpencvAlgorithm.hpp"
#include <EventHandler.hpp>
#include <boost/property_tree/ptree.hpp>
#include "OpencvAlgorithmOpenCVImpl.hpp"

namespace kurento
{
namespace module
{
namespace opencvalgorithm
{
class OpencvAlgorithmImpl;
} /* opencvalgorithm */
} /* module */
} /* kurento */

namespace kurento
{
void Serialize (std::shared_ptr<kurento::module::opencvalgorithm::OpencvAlgorithmImpl> &object, JsonSerializer &serializer);
} /* kurento */

namespace kurento
{
class MediaPipelineImpl;
} /* kurento */

namespace kurento
{
namespace module
{
namespace opencvalgorithm
{

class OpencvAlgorithmImpl : public OpenCVFilterImpl, public virtual OpencvAlgorithm, public virtual OpencvAlgorithmOpenCVImpl
{

public:

  OpencvAlgorithmImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline);

  virtual ~OpencvAlgorithmImpl ();
  
  void setMaxBufferSize(int size);
  
  void setMaxTimeToRec(int time);
  
  void setEventHandler();
  
  void dealoc();
  
  void setPoints(int x0, int x1,int x2,int x3,int y0,int y1,int y2,int y3, int start);
  
  void setOpencvAlgorithmType(int type);

  /* Next methods are automatically implemented by code generator */
  virtual bool connect (const std::string &eventType, std::shared_ptr<EventHandler> handler);
  virtual void invoke (std::shared_ptr<MediaObjectImpl> obj,
                       const std::string &methodName, const Json::Value &params,
                       Json::Value &response);

  virtual void Serialize (JsonSerializer &serializer);

private:

  class StaticConstructor
  {
  public:
    StaticConstructor();
  };

  static StaticConstructor staticConstructor;

};

} /* opencvalgorithm */
} /* module */
} /* kurento */

#endif /*  __OPENCV_ALGORITHM_IMPL_HPP__ */
